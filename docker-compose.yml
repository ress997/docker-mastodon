version: '3'
services:

  db:
    restart: always
    image: postgres:11.2-alpine
    environment:
      - TZ=Japan
    networks:
      - back
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    volumes:
      - ./postgres:/var/lib/postgresql/data

  redis:
    restart: always
    image: redis:5.0-alpine
    environment:
      - TZ=Japan
    networks:
      - back
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    volumes:
      - ./redis:/data

#  es:
#    restart: always
#    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.3
#    environment:
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    networks:
#      - back
#    healthcheck:
#      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
#    volumes:
#      - ./elasticsearch:/usr/share/elasticsearch/data

  web:
#    build: app
    image: tootsuite/mastodon:v2.8.2
    restart: always
    environment:
      - GITHUB_REPOSITORY="ress997/docker-mastodon"
      - TZ=Japan
      - WEB_CONCURRENCY=1
      - MAX_THREADS=5
    env_file:
      - .env.production
      - .env.ruby
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000 -b '0.0.0.0'"
    networks:
      - front
      - back
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --header 'x-forwarded-proto: https' --proxy=off localhost:3000/api/v1/instance || exit 1"]
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - db
      - redis
#      - es
    volumes:
      - ./public/system:/mastodon/public/system

  streaming:
#    build: app
    image: tootsuite/mastodon:v2.8.2
    restart: always
    environment:
      - TZ=Japan
    env_file: .env.production
    command: node ./streaming/index.js
    networks:
      - front
      - back
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --header 'x-forwarded-proto: https' --proxy=off localhost:4000/api/v1/streaming/health || exit 1"]
    ports:
      - "127.0.0.1:4000:4000"
    depends_on:
      - db
      - redis

  sidekiq:
#    build: app
    image: tootsuite/mastodon:v2.8.2
    restart: always
    environment:
      - TZ=Japan
    env_file:
      - .env.production
      - .env.ruby
    command: bundle exec sidekiq -c 15 -q default -q mailers -q push -q pull
    depends_on:
      - db
      - redis
    networks:
      - front
      - back
    volumes:
      - ./public/system:/mastodon/public/system

#  sidekiq-default:
##    build: app
#    image: tootsuite/mastodon:v2.8.2
#    restart: always
#    environment:
#      - TZ=Japan
#    env_file:
#      - .env.production
#      - .env.ruby
#    command: bundle exec sidekiq -c 10 -q default
#    depends_on:
#      - db
#      - redis
#    networks:
#      - front
#      - back
#    volumes:
#      - ./public/system:/mastodon/public/system

#  sidekiq-pullpush:
##    build: app
#    image: tootsuite/mastodon:v2.8.2
#    restart: always
#    environment:
#      - TZ=Japan
#    env_file:
#      - .env.production
#      - .env.ruby
#    command: bundle exec sidekiq -c 5 -q pull -q push
#    depends_on:
#      - db
#      - redis
#    networks:
#      - front
#      - back
#    volumes:
#      - ./public/system:/mastodon/public/system

#  sidekiq-mail:
##    build: app
#    image: tootsuite/mastodon:v2.8.2
#    restart: always
#    environment:
#      - TZ=Japan
#    env_file:
#      - .env.production
#      - .env.ruby
#    command: bundle exec sidekiq -c 1 -q mailers
#    depends_on:
#      - db
#      - redis
#    networks:
#      - front
#      - back
#    volumes:
#      - ./public/system:/mastodon/public/system

## Uncomment to enable federation with tor instances along with adding the following ENV variables
## http_proxy=http://privoxy:8118
## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
#  tor:
#    image: sirboops/tor
#    networks:
#      - front
#      - back
#
#  privoxy:
#    image: sirboops/privoxy
#    volumes:
#      - ./priv-config:/opt/config
#    networks:
#      - front
#      - back

networks:
  front:
  back:
    internal: true
